// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/sig/sig.proto

package apiv1sig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SIG_CreateComponent_FullMethodName                = "/api.v1.sig.SIG/CreateComponent"
	SIG_RetrieveComponent_FullMethodName              = "/api.v1.sig.SIG/RetrieveComponent"
	SIG_CreateInterComponentDependency_FullMethodName = "/api.v1.sig.SIG/CreateInterComponentDependency"
	SIG_Reset_FullMethodName                          = "/api.v1.sig.SIG/Reset"
)

// SIGClient is the client API for SIG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SIGClient interface {
	// Create a Component within the global knowledge of the system under observation.
	CreateComponent(ctx context.Context, in *CreateComponentRequest, opts ...grpc.CallOption) (*Component, error)
	// Retrieve the current knowledge state of a Component of the system under observation.
	RetrieveComponent(ctx context.Context, in *RetrieveComponentRequest, opts ...grpc.CallOption) (*Component, error)
	// Create an Inter-Component Dependency between Endpoints that exposes Components together.
	CreateInterComponentDependency(ctx context.Context, in *CreateInterComponentDependencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reset the global knowledge of the system under observation.
	Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sIGClient struct {
	cc grpc.ClientConnInterface
}

func NewSIGClient(cc grpc.ClientConnInterface) SIGClient {
	return &sIGClient{cc}
}

func (c *sIGClient) CreateComponent(ctx context.Context, in *CreateComponentRequest, opts ...grpc.CallOption) (*Component, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Component)
	err := c.cc.Invoke(ctx, SIG_CreateComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIGClient) RetrieveComponent(ctx context.Context, in *RetrieveComponentRequest, opts ...grpc.CallOption) (*Component, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Component)
	err := c.cc.Invoke(ctx, SIG_RetrieveComponent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIGClient) CreateInterComponentDependency(ctx context.Context, in *CreateInterComponentDependencyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SIG_CreateInterComponentDependency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sIGClient) Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SIG_Reset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SIGServer is the server API for SIG service.
// All implementations must embed UnimplementedSIGServer
// for forward compatibility.
type SIGServer interface {
	// Create a Component within the global knowledge of the system under observation.
	CreateComponent(context.Context, *CreateComponentRequest) (*Component, error)
	// Retrieve the current knowledge state of a Component of the system under observation.
	RetrieveComponent(context.Context, *RetrieveComponentRequest) (*Component, error)
	// Create an Inter-Component Dependency between Endpoints that exposes Components together.
	CreateInterComponentDependency(context.Context, *CreateInterComponentDependencyRequest) (*emptypb.Empty, error)
	// Reset the global knowledge of the system under observation.
	Reset(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedSIGServer()
}

// UnimplementedSIGServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSIGServer struct{}

func (UnimplementedSIGServer) CreateComponent(context.Context, *CreateComponentRequest) (*Component, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComponent not implemented")
}
func (UnimplementedSIGServer) RetrieveComponent(context.Context, *RetrieveComponentRequest) (*Component, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveComponent not implemented")
}
func (UnimplementedSIGServer) CreateInterComponentDependency(context.Context, *CreateInterComponentDependencyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterComponentDependency not implemented")
}
func (UnimplementedSIGServer) Reset(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedSIGServer) mustEmbedUnimplementedSIGServer() {}
func (UnimplementedSIGServer) testEmbeddedByValue()             {}

// UnsafeSIGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SIGServer will
// result in compilation errors.
type UnsafeSIGServer interface {
	mustEmbedUnimplementedSIGServer()
}

func RegisterSIGServer(s grpc.ServiceRegistrar, srv SIGServer) {
	// If the following call pancis, it indicates UnimplementedSIGServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SIG_ServiceDesc, srv)
}

func _SIG_CreateComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIGServer).CreateComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SIG_CreateComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIGServer).CreateComponent(ctx, req.(*CreateComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIG_RetrieveComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIGServer).RetrieveComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SIG_RetrieveComponent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIGServer).RetrieveComponent(ctx, req.(*RetrieveComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIG_CreateInterComponentDependency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterComponentDependencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIGServer).CreateInterComponentDependency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SIG_CreateInterComponentDependency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIGServer).CreateInterComponentDependency(ctx, req.(*CreateInterComponentDependencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SIG_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIGServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SIG_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIGServer).Reset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SIG_ServiceDesc is the grpc.ServiceDesc for SIG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SIG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.sig.SIG",
	HandlerType: (*SIGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComponent",
			Handler:    _SIG_CreateComponent_Handler,
		},
		{
			MethodName: "RetrieveComponent",
			Handler:    _SIG_RetrieveComponent_Handler,
		},
		{
			MethodName: "CreateInterComponentDependency",
			Handler:    _SIG_CreateInterComponentDependency_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _SIG_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/sig/sig.proto",
}
