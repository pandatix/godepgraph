// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/alg4/alg4.proto

package apiv1alg4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Alg4_CreateVulnerability_FullMethodName = "/api.v1.alg4.Alg4/CreateVulnerability"
	Alg4_CreateBinding_FullMethodName       = "/api.v1.alg4.Alg4/CreateBinding"
	Alg4_CreateServes_FullMethodName        = "/api.v1.alg4.Alg4/CreateServes"
)

// Alg4Client is the client API for Alg4 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Alg4 is the implementation of the 4th algorithm of the paper "Reconstructing
// System-of-Systems architectures towards analyzing cascading attacks".
type Alg4Client interface {
	CreateVulnerability(ctx context.Context, in *CreateVulnerabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Create a binding between specializations of a Library, given the model
	// of Figure 1.
	CreateBinding(ctx context.Context, in *CreateBindingRequest, opts ...grpc.CallOption) (*Binding, error)
	CreateServes(ctx context.Context, in *CreateServesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type alg4Client struct {
	cc grpc.ClientConnInterface
}

func NewAlg4Client(cc grpc.ClientConnInterface) Alg4Client {
	return &alg4Client{cc}
}

func (c *alg4Client) CreateVulnerability(ctx context.Context, in *CreateVulnerabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Alg4_CreateVulnerability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alg4Client) CreateBinding(ctx context.Context, in *CreateBindingRequest, opts ...grpc.CallOption) (*Binding, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Binding)
	err := c.cc.Invoke(ctx, Alg4_CreateBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alg4Client) CreateServes(ctx context.Context, in *CreateServesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Alg4_CreateServes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Alg4Server is the server API for Alg4 service.
// All implementations must embed UnimplementedAlg4Server
// for forward compatibility.
//
// Alg4 is the implementation of the 4th algorithm of the paper "Reconstructing
// System-of-Systems architectures towards analyzing cascading attacks".
type Alg4Server interface {
	CreateVulnerability(context.Context, *CreateVulnerabilityRequest) (*emptypb.Empty, error)
	// Create a binding between specializations of a Library, given the model
	// of Figure 1.
	CreateBinding(context.Context, *CreateBindingRequest) (*Binding, error)
	CreateServes(context.Context, *CreateServesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAlg4Server()
}

// UnimplementedAlg4Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAlg4Server struct{}

func (UnimplementedAlg4Server) CreateVulnerability(context.Context, *CreateVulnerabilityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVulnerability not implemented")
}
func (UnimplementedAlg4Server) CreateBinding(context.Context, *CreateBindingRequest) (*Binding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinding not implemented")
}
func (UnimplementedAlg4Server) CreateServes(context.Context, *CreateServesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServes not implemented")
}
func (UnimplementedAlg4Server) mustEmbedUnimplementedAlg4Server() {}
func (UnimplementedAlg4Server) testEmbeddedByValue()              {}

// UnsafeAlg4Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Alg4Server will
// result in compilation errors.
type UnsafeAlg4Server interface {
	mustEmbedUnimplementedAlg4Server()
}

func RegisterAlg4Server(s grpc.ServiceRegistrar, srv Alg4Server) {
	// If the following call pancis, it indicates UnimplementedAlg4Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Alg4_ServiceDesc, srv)
}

func _Alg4_CreateVulnerability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVulnerabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Alg4Server).CreateVulnerability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alg4_CreateVulnerability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Alg4Server).CreateVulnerability(ctx, req.(*CreateVulnerabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alg4_CreateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Alg4Server).CreateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alg4_CreateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Alg4Server).CreateBinding(ctx, req.(*CreateBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alg4_CreateServes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Alg4Server).CreateServes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alg4_CreateServes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Alg4Server).CreateServes(ctx, req.(*CreateServesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Alg4_ServiceDesc is the grpc.ServiceDesc for Alg4 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alg4_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.alg4.Alg4",
	HandlerType: (*Alg4Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVulnerability",
			Handler:    _Alg4_CreateVulnerability_Handler,
		},
		{
			MethodName: "CreateBinding",
			Handler:    _Alg4_CreateBinding_Handler,
		},
		{
			MethodName: "CreateServes",
			Handler:    _Alg4_CreateServes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/alg4/alg4.proto",
}
