package apiv1alg4

import (
	"context"

	"github.com/pandatix/godepgraph/global"
	"go.uber.org/zap"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// XXX CreateVulnerability does not permit parallel vulnerabilities research. The implementation is too narrow for this job, which a technical limitation we put in place to avoid making this tool too powerfull for no use in this contribution
func (alg4 *Alg4) CreateVulnerability(ctx context.Context, req *CreateVulnerabilityRequest) (*emptypb.Empty, error) {
	logger := global.Log()
	man := global.GetNeo4JManager()

	logger.Info(ctx, "creating vulnerability",
		zap.String("identity", req.GetIdentity()),
	)

	if err := upsertVulnerability(ctx, man, req); err != nil {
		return nil, err
	}

	// // Rule 1. Mark all reaching symbols
	if err := allReachingSymbols(ctx, man); err != nil {
		return nil, err
	}

	// Rule 2. Mark all involved Libraries. Imply rule 3.4 and 4.a by specializations
	if err := allProvidingLibraries(ctx, man); err != nil {
		return nil, err
	}

	// Rule 3.b. Mark all reaching Components.
	if err := allReachingComponents(ctx, man); err != nil {
		return nil, err
	}

	// Rule 4.b. Mark all hosting assets.
	if err := allHostingAssets(ctx, man); err != nil {
		return nil, err
	}

	// Rule 3.c. Keep all hosted Component maybe used for Lateral Movements
	if err := lateralMovement(ctx, man); err != nil {
		return nil, err
	}

	// Rule 5. Mark all affected Systems
	if err := allSystems(ctx, man); err != nil {
		return nil, err
	}

	return nil, nil
}
