// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/rdg/rdg.proto

package apiv1rdg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RDG_CreateStack_FullMethodName = "/api.v1.rdg.RDG/CreateStack"
	RDG_Reset_FullMethodName       = "/api.v1.rdg.RDG/Reset"
)

// RDGClient is the client API for RDG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RDGClient interface {
	CreateStack(ctx context.Context, in *CreateStackRequest, opts ...grpc.CallOption) (*Stack, error)
	// Reset the global knowledge of a state.
	Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rDGClient struct {
	cc grpc.ClientConnInterface
}

func NewRDGClient(cc grpc.ClientConnInterface) RDGClient {
	return &rDGClient{cc}
}

func (c *rDGClient) CreateStack(ctx context.Context, in *CreateStackRequest, opts ...grpc.CallOption) (*Stack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stack)
	err := c.cc.Invoke(ctx, RDG_CreateStack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rDGClient) Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RDG_Reset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RDGServer is the server API for RDG service.
// All implementations must embed UnimplementedRDGServer
// for forward compatibility.
type RDGServer interface {
	CreateStack(context.Context, *CreateStackRequest) (*Stack, error)
	// Reset the global knowledge of a state.
	Reset(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedRDGServer()
}

// UnimplementedRDGServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRDGServer struct{}

func (UnimplementedRDGServer) CreateStack(context.Context, *CreateStackRequest) (*Stack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStack not implemented")
}
func (UnimplementedRDGServer) Reset(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedRDGServer) mustEmbedUnimplementedRDGServer() {}
func (UnimplementedRDGServer) testEmbeddedByValue()             {}

// UnsafeRDGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RDGServer will
// result in compilation errors.
type UnsafeRDGServer interface {
	mustEmbedUnimplementedRDGServer()
}

func RegisterRDGServer(s grpc.ServiceRegistrar, srv RDGServer) {
	// If the following call pancis, it indicates UnimplementedRDGServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RDG_ServiceDesc, srv)
}

func _RDG_CreateStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDGServer).CreateStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RDG_CreateStack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDGServer).CreateStack(ctx, req.(*CreateStackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RDG_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDGServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RDG_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDGServer).Reset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RDG_ServiceDesc is the grpc.ServiceDesc for RDG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RDG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.rdg.RDG",
	HandlerType: (*RDGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStack",
			Handler:    _RDG_CreateStack_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _RDG_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/rdg/rdg.proto",
}
