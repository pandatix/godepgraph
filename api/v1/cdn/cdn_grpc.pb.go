// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/cdn/cdn.proto

package apiv1cdn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CDN_CreateLibrary_FullMethodName                       = "/api.v1.cdn.CDN/CreateLibrary"
	CDN_RetrieveLibrary_FullMethodName                     = "/api.v1.cdn.CDN/RetrieveLibrary"
	CDN_RetrieveSymbolCallGraphDependencies_FullMethodName = "/api.v1.cdn.CDN/RetrieveSymbolCallGraphDependencies"
	CDN_Reset_FullMethodName                               = "/api.v1.cdn.CDN/Reset"
)

// CDNClient is the client API for CDN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CDNClient interface {
	CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*Library, error)
	// Returns the dependency graph of a Library, along the call-graph dependencies.
	RetrieveLibrary(ctx context.Context, in *RetrieveLibraryRequest, opts ...grpc.CallOption) (*Library, error)
	// Returns the symbols one depends upon.
	RetrieveSymbolCallGraphDependencies(ctx context.Context, in *RetrieveSymbolCallGraphDependenciesRequest, opts ...grpc.CallOption) (*SymbolDepGraph, error)
	// Reset the global knowledge of a codebase.
	Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cDNClient struct {
	cc grpc.ClientConnInterface
}

func NewCDNClient(cc grpc.ClientConnInterface) CDNClient {
	return &cDNClient{cc}
}

func (c *cDNClient) CreateLibrary(ctx context.Context, in *CreateLibraryRequest, opts ...grpc.CallOption) (*Library, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Library)
	err := c.cc.Invoke(ctx, CDN_CreateLibrary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNClient) RetrieveLibrary(ctx context.Context, in *RetrieveLibraryRequest, opts ...grpc.CallOption) (*Library, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Library)
	err := c.cc.Invoke(ctx, CDN_RetrieveLibrary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNClient) RetrieveSymbolCallGraphDependencies(ctx context.Context, in *RetrieveSymbolCallGraphDependenciesRequest, opts ...grpc.CallOption) (*SymbolDepGraph, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SymbolDepGraph)
	err := c.cc.Invoke(ctx, CDN_RetrieveSymbolCallGraphDependencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNClient) Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CDN_Reset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDNServer is the server API for CDN service.
// All implementations must embed UnimplementedCDNServer
// for forward compatibility.
type CDNServer interface {
	CreateLibrary(context.Context, *CreateLibraryRequest) (*Library, error)
	// Returns the dependency graph of a Library, along the call-graph dependencies.
	RetrieveLibrary(context.Context, *RetrieveLibraryRequest) (*Library, error)
	// Returns the symbols one depends upon.
	RetrieveSymbolCallGraphDependencies(context.Context, *RetrieveSymbolCallGraphDependenciesRequest) (*SymbolDepGraph, error)
	// Reset the global knowledge of a codebase.
	Reset(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCDNServer()
}

// UnimplementedCDNServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCDNServer struct{}

func (UnimplementedCDNServer) CreateLibrary(context.Context, *CreateLibraryRequest) (*Library, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLibrary not implemented")
}
func (UnimplementedCDNServer) RetrieveLibrary(context.Context, *RetrieveLibraryRequest) (*Library, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLibrary not implemented")
}
func (UnimplementedCDNServer) RetrieveSymbolCallGraphDependencies(context.Context, *RetrieveSymbolCallGraphDependenciesRequest) (*SymbolDepGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSymbolCallGraphDependencies not implemented")
}
func (UnimplementedCDNServer) Reset(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedCDNServer) mustEmbedUnimplementedCDNServer() {}
func (UnimplementedCDNServer) testEmbeddedByValue()             {}

// UnsafeCDNServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CDNServer will
// result in compilation errors.
type UnsafeCDNServer interface {
	mustEmbedUnimplementedCDNServer()
}

func RegisterCDNServer(s grpc.ServiceRegistrar, srv CDNServer) {
	// If the following call pancis, it indicates UnimplementedCDNServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CDN_ServiceDesc, srv)
}

func _CDN_CreateLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServer).CreateLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDN_CreateLibrary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServer).CreateLibrary(ctx, req.(*CreateLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDN_RetrieveLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServer).RetrieveLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDN_RetrieveLibrary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServer).RetrieveLibrary(ctx, req.(*RetrieveLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDN_RetrieveSymbolCallGraphDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSymbolCallGraphDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServer).RetrieveSymbolCallGraphDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDN_RetrieveSymbolCallGraphDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServer).RetrieveSymbolCallGraphDependencies(ctx, req.(*RetrieveSymbolCallGraphDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDN_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CDN_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServer).Reset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CDN_ServiceDesc is the grpc.ServiceDesc for CDN service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CDN_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.cdn.CDN",
	HandlerType: (*CDNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLibrary",
			Handler:    _CDN_CreateLibrary_Handler,
		},
		{
			MethodName: "RetrieveLibrary",
			Handler:    _CDN_RetrieveLibrary_Handler,
		},
		{
			MethodName: "RetrieveSymbolCallGraphDependencies",
			Handler:    _CDN_RetrieveSymbolCallGraphDependencies_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _CDN_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/cdn/cdn.proto",
}
